{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Компонент для списка subscriber\nimport SubscriberItem from \"@/components/SubscriberItem.vue\";\nexport default {\n  components: {\n    SubscriberItem\n  },\n  props: {\n    subscribers: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      selectedChannels: []\n    };\n  },\n  methods: {\n    toggleSelection(subscriberId) {\n      if (this.selectedSubscribers.includes(subscriberId)) {\n        this.selectedSubscribers = this.selectedSubscribers.filter(id => id !== subscriberId);\n      } else {\n        this.selectedSubscribers.push(subscriberId);\n      }\n    },\n    toggleAll(event) {\n      if (event.target.checked) {\n        this.selectedSubscribers = this.subscribers.map(subscriber => subscriber.id);\n      } else {\n        this.selectedSubscribers = [];\n      }\n    },\n    removeSelectedSubscribers() {\n      this.$emit('removeSelected', this.selectedSubscribers);\n      this.selectedSubscribers = [];\n    }\n  }\n};","map":{"version":3,"names":["SubscriberItem","components","props","subscribers","type","Array","required","data","selectedChannels","methods","toggleSelection","subscriberId","selectedSubscribers","includes","filter","id","push","toggleAll","event","target","checked","map","subscriber","removeSelectedSubscribers","$emit"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\SubscriberList.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper__subscribers\">\r\n    <h1>Каналы отправки уведомлений</h1>\r\n    <button @click=\"removeSelectedSubscribers\">Удалить</button>\r\n    <router-link to=\"/subscribers/create\">\r\n    <button>Создать канал</button>\r\n    </router-link>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th class=\"subscriber__checkbox\"><input type=\"checkbox\" @change=\"toggleAll\"></th>\r\n          <th class=\"subscriber__id\">ID</th>\r\n          <th class=\"subscriber__name\">Имя</th>\r\n          <th class=\"subscriber__code\">Телефон</th>\r\n          <th class=\"subscriber__tg\">Telegram Chatid</th>\r\n          <th class=\"subscriber__status\">Статус</th>\r\n          <th class=\"subscriber__action\">Действия</th>\r\n        </tr>\r\n      </thead>\r\n      <subscriber-item v-for=\"subscriber in subscribers\" v-bind:subscriber=\"subscriber\" v-bind:key=\"subscriber.id\" \r\n        @remove=\"$emit('remove', subscriber)\" :selected=\"selectedSubscribers.includes(subscriber.id)\"\r\n        @toggle=\"toggleSelection\">\r\n      </subscriber-item>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Компонент для списка subscriber\r\nimport SubscriberItem from \"@/components/SubscriberItem.vue\"\r\nexport default {\r\ncomponents: {SubscriberItem},\r\nprops: {\r\n  subscribers: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n},\r\ndata() {\r\n  return {\r\n    selectedChannels: []\r\n  };\r\n},\r\nmethods: {\r\n  toggleSelection(subscriberId) {\r\n    if (this.selectedSubscribers.includes(subscriberId)) {\r\n      this.selectedSubscribers = this.selectedSubscribers.filter(id => id !== subscriberId);\r\n    } else {\r\n      this.selectedSubscribers.push(subscriberId);\r\n    }\r\n  },\r\n  toggleAll(event) {\r\n    if (event.target.checked) {\r\n      this.selectedSubscribers = this.subscribers.map(subscriber => subscriber.id);\r\n    } else {\r\n      this.selectedSubscribers = [];\r\n    }\r\n  },\r\n  removeSelectedSubscribers() {\r\n    this.$emit('removeSelected', this.selectedSubscribers);\r\n    this.selectedSubscribers = [];\r\n  }\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ntable {\r\nwidth: 100%;\r\nborder-top: 7px solid rgb(218, 218, 218);\r\nborder-collapse: collapse;\r\ntext-align: center;\r\nmargin-bottom: 20px;\r\nborder: 1px solid #dddddd;\r\n}\r\n\r\ntd {\r\ntext-align: left;\r\npadding: 10px;\r\nborder: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\nth {\r\ntext-align: left;\r\npadding: 10px;\r\nborder: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\n.wrapper__subscribers {\r\nbackground-color: white;\r\n}\r\n\r\n.channel__checkbox {\r\nwidth: 36px;\r\n}\r\n\r\n.subscriber__id {\r\nwidth: 40px;\r\n}\r\n\r\n.subscriber__name {\r\nwidth: 150px;\r\n}\r\n\r\n.subscriber__code {\r\nwidth: 200px;\r\n}\r\n\r\n.subscriber__tg {\r\nwidth: 200px;\r\n}\r\n\r\n.subscriber__status {\r\nwidth: 100px;\r\n}\r\n\r\n.subscriberl__action {\r\nwidth: 150px;\r\n}\r\n</style>\r\n"],"mappings":";AA4BA;AACA,OAAOA,cAAa,MAAO,iCAAgC;AAC3D,eAAe;EACfC,UAAU,EAAE;IAACD;EAAc,CAAC;EAC5BE,KAAK,EAAE;IACLC,WAAW,EAAE;MACXC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,YAAY,EAAE;MAC5B,IAAI,IAAI,CAACC,mBAAmB,CAACC,QAAQ,CAACF,YAAY,CAAC,EAAE;QACnD,IAAI,CAACC,mBAAkB,GAAI,IAAI,CAACA,mBAAmB,CAACE,MAAM,CAACC,EAAC,IAAKA,EAAC,KAAMJ,YAAY,CAAC;MACvF,OAAO;QACL,IAAI,CAACC,mBAAmB,CAACI,IAAI,CAACL,YAAY,CAAC;MAC7C;IACF,CAAC;IACDM,SAASA,CAACC,KAAK,EAAE;MACf,IAAIA,KAAK,CAACC,MAAM,CAACC,OAAO,EAAE;QACxB,IAAI,CAACR,mBAAkB,GAAI,IAAI,CAACT,WAAW,CAACkB,GAAG,CAACC,UAAS,IAAKA,UAAU,CAACP,EAAE,CAAC;MAC9E,OAAO;QACL,IAAI,CAACH,mBAAkB,GAAI,EAAE;MAC/B;IACF,CAAC;IACDW,yBAAyBA,CAAA,EAAG;MAC1B,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAACZ,mBAAmB,CAAC;MACtD,IAAI,CAACA,mBAAkB,GAAI,EAAE;IAC/B;EACF;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}