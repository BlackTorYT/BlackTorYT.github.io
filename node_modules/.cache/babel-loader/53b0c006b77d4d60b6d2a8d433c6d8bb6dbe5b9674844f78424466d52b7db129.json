{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PatternItem from \"@/components/PatternItem.vue\";\nexport default {\n  components: {\n    PatternItem\n  },\n  props: {\n    patterns: {\n      type: Array,\n      required: true\n    },\n    subs: {\n      type: Array,\n      required: true\n    },\n    channels: {\n      type: Array,\n      required: true\n    },\n    subscribers: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      selectedPatterns: []\n    };\n  },\n  methods: {\n    toggleSelection(patternId) {\n      if (this.selectedPatterns.includes(patternId)) {\n        this.selectedPatterns = this.selectedPatterns.filter(id => id !== patternId);\n      } else {\n        this.selectedPatterns.push(patternId);\n      }\n    },\n    toggleAll(event) {\n      if (event.target.checked) {\n        this.selectedPatterns = this.patterns.map(pattern => pattern.id);\n      } else {\n        this.selectedPatterns = [];\n      }\n    },\n    removeSelectedPatterns() {\n      this.$emit('removeSelected', this.selectedPatterns);\n      this.selectedPatterns = [];\n    },\n    handleTestPattern(log) {\n      console.log('PatternList received testPattern event with log:', log);\n      this.$emit('testPattern', log);\n    }\n  }\n};","map":{"version":3,"names":["PatternItem","components","props","patterns","type","Array","required","subs","channels","subscribers","data","selectedPatterns","methods","toggleSelection","patternId","includes","filter","id","push","toggleAll","event","target","checked","map","pattern","removeSelectedPatterns","$emit","handleTestPattern","log","console"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\PatternList.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper__patterns\">\r\n    <div class=\"pattern__header\">\r\n      <h1 class=\"pattern__title\">Управление шаплонами</h1>\r\n      <span>Панель управления / Шаблоны </span>\r\n    </div>\r\n      <div class=\"pattern__buttons\">\r\n      <my-delete @click=\"removeSelectedPatterns\">Удалить</my-delete>\r\n      <!-- <router-link to=\"/channels/create\"> -->\r\n      <my-create @click=\"$router.push('/patterns/create')\">Создать</my-create>\r\n      <!-- </router-link> -->\r\n    </div>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th class=\"pattern__checkbox\"><input type=\"checkbox\" @change=\"toggleAll\"></th>\r\n          <th class=\"pattern__id\">ID</th>\r\n          <th class=\"pattern__name\">Название</th>\r\n          <th class=\"pattern__code\">Код</th>\r\n          <th class=\"pattern__pattern\">Шаблон сообщения</th>\r\n          <th class=\"pattern__type\">Тип события</th>\r\n          <th class=\"pattern__action\">Действия</th>\r\n        </tr>\r\n      </thead>\r\n      <pattern-item \r\n        v-for=\"pattern in patterns\" \r\n        :key=\"pattern.id\" \r\n        :pattern=\"pattern\" \r\n        :selected=\"selectedPatterns.includes(pattern.id)\"\r\n        :subs=\"subs\"\r\n        :subscribers=\"subscribers\"\r\n        :channels=\"channels\"\r\n        @remove=\"$emit('remove', pattern)\" \r\n        @toggle=\"toggleSelection\" \r\n        @testPattern=\"handleTestPattern\"\r\n      />\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport PatternItem from \"@/components/PatternItem.vue\";\r\n\r\nexport default {\r\n  components: { PatternItem },\r\n  props: {\r\n    patterns: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    subs: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    channels: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    subscribers: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedPatterns: []\r\n    };\r\n  },\r\n  methods: {\r\n    toggleSelection(patternId) {\r\n      if (this.selectedPatterns.includes(patternId)) {\r\n        this.selectedPatterns = this.selectedPatterns.filter(id => id !== patternId);\r\n      } else {\r\n        this.selectedPatterns.push(patternId);\r\n      }\r\n    },\r\n    toggleAll(event) {\r\n      if (event.target.checked) {\r\n        this.selectedPatterns = this.patterns.map(pattern => pattern.id);\r\n      } else {\r\n        this.selectedPatterns = [];\r\n      }\r\n    },\r\n    removeSelectedPatterns() {\r\n      this.$emit('removeSelected', this.selectedPatterns);\r\n      this.selectedPatterns = [];\r\n    },\r\n    handleTestPattern(log) {\r\n      console.log('PatternList received testPattern event with log:', log);\r\n      this.$emit('testPattern', log);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ntable {\r\n  width: 98%;\r\n  border-top: 7px solid rgb(218, 218, 218);\r\n  border-collapse: collapse;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #dddddd;\r\n  margin: auto;\r\n}\r\n\r\ntd {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\nth {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\n.wrapper__subs {\r\n  background-color: white;\r\n}\r\n\r\n\r\n.pattern__name {\r\n  width: 150px;\r\n  background-color: white\r\n}\r\n\r\n.pattern__code {\r\n  width: 283px;\r\n}\r\n\r\n.pattern__type {\r\n  width: 250px;\r\n}\r\n\r\n.pattern__action {\r\n  width: 101px;\r\n}\r\n\r\n.pattern__buttons {\r\n  display: flex;\r\n  margin-left: auto;\r\n  float: right;\r\n  margin-right: 10px;\r\n  gap: 14px;\r\n  background-color: white;\r\n  padding: 12px 0px;\r\n}\r\n\r\n.pattern__header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: rgb(241, 241, 241);\r\n  padding-left: 16px;\r\n  padding-right: 14px;\r\n  padding-bottom: 14px;\r\n  padding-top: 14px;\r\n}\r\n\r\n.wrapper__patterns {\r\n  background-color: white;\r\n}\r\n\r\n.pattern__checkbox {\r\n  width: 36px;\r\n}\r\n</style>\r\n"],"mappings":";AAyCA,OAAOA,WAAU,MAAO,8BAA8B;AAEtD,eAAe;EACbC,UAAU,EAAE;IAAED;EAAY,CAAC;EAC3BE,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAE;MACJH,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDE,QAAQ,EAAE;MACRJ,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ,CAAC;IACDG,WAAW,EAAE;MACXL,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,SAAS,EAAE;MACzB,IAAI,IAAI,CAACH,gBAAgB,CAACI,QAAQ,CAACD,SAAS,CAAC,EAAE;QAC7C,IAAI,CAACH,gBAAe,GAAI,IAAI,CAACA,gBAAgB,CAACK,MAAM,CAACC,EAAC,IAAKA,EAAC,KAAMH,SAAS,CAAC;MAC9E,OAAO;QACL,IAAI,CAACH,gBAAgB,CAACO,IAAI,CAACJ,SAAS,CAAC;MACvC;IACF,CAAC;IACDK,SAASA,CAACC,KAAK,EAAE;MACf,IAAIA,KAAK,CAACC,MAAM,CAACC,OAAO,EAAE;QACxB,IAAI,CAACX,gBAAe,GAAI,IAAI,CAACR,QAAQ,CAACoB,GAAG,CAACC,OAAM,IAAKA,OAAO,CAACP,EAAE,CAAC;MAClE,OAAO;QACL,IAAI,CAACN,gBAAe,GAAI,EAAE;MAC5B;IACF,CAAC;IACDc,sBAAsBA,CAAA,EAAG;MACvB,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAACf,gBAAgB,CAAC;MACnD,IAAI,CAACA,gBAAe,GAAI,EAAE;IAC5B,CAAC;IACDgB,iBAAiBA,CAACC,GAAG,EAAE;MACrBC,OAAO,CAACD,GAAG,CAAC,kDAAkD,EAAEA,GAAG,CAAC;MACpE,IAAI,CAACF,KAAK,CAAC,aAAa,EAAEE,GAAG,CAAC;IAChC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}