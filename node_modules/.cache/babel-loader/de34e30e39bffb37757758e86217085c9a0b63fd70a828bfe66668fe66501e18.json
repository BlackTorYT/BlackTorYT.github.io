{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    class: \"wrapper\",\n    onSubmit: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.handleSubmit && $options.handleSubmit(...args), [\"prevent\"])),\n    style: {\n      \"background-color\": \"white\"\n    }\n  }, [_createCommentVNode(\" остальной код формы \")], 32 /* NEED_HYDRATION */);\n}","map":{"version":3,"names":["_createElementBlock","class","onSubmit","_cache","_withModifiers","args","$options","handleSubmit","style","_createCommentVNode"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\ChannelForm.vue"],"sourcesContent":["<template>\n  <form class=\"wrapper\" @submit.prevent=\"handleSubmit\" style=\"background-color: white;\">\n    <!-- остальной код формы -->\n  </form>\n</template>\n\n<script>\nexport default {\n  props: {\n    channels: {\n      type: Array,\n      required: true\n    },\n    channel: {\n      type: Object,\n      default: () => ({\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      })\n    }\n  },\n  data() {\n    return {\n      editedChannel: {\n        ...this.channel\n      },\n      errors: {\n        title: '',\n        code: ''\n      }\n    };\n  },\n  methods: {\n    getNextId() {\n      // логика getNextId остается той же\n    },\n    handleSubmit() {\n      this.clearErrors();\n\n      if (!this.editedChannel.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n\n      if (!this.editedChannel.code) {\n        this.errors.code = 'Уникальный код обязательно для заполнения';\n      }\n\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n\n      const updatedChannel = { ...this.editedChannel };\n      this.$emit('update', updatedChannel);\n      this.resetForm();\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    resetForm() {\n      this.editedChannel = {\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      };\n    }\n  }\n};\n</script>\n\n<style scoped>\n.save__btn {\n  display: block;\n  width: 100%;\n  background-color: #3386f3;\n  color: white;\n  border: none;\n  padding: 10px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\n.input {\n  margin-bottom: 10px;\n  padding: 8px;\n}\n\n.error {\n  color: red;\n  font-size: 14px;\n}\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAEO;IAFDC,KAAK,EAAC,SAAS;IAAEC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAD/BC,cAAA,KAAAC,IAAA,KACyCC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IAAEG,KAAgC,EAAhC;MAAA;IAAA;MACnDC,mBAAA,yBAA4B,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}