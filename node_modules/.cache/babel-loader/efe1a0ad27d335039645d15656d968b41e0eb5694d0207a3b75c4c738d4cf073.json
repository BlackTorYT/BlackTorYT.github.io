{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_channel_form = _resolveComponent(\"channel-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, \"Редактирование канала: \" + _toDisplayString($setup.channel.id), 1 /* TEXT */), _createVNode(_component_channel_form, {\n    channel: $setup.channel,\n    onSave: $setup.saveChannel\n  }, null, 8 /* PROPS */, [\"channel\", \"onSave\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$setup","channel","id","_createVNode","_component_channel_form","onSave","saveChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\ChannelEditPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Редактирование канала: {{ channel.id }}</h1>\r\n    <channel-form :channel=\"channel\" @save=\"saveChannel\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\n\r\nimport ChannelForm from \"@/components/ChannelForm.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    ChannelForm\r\n  },\r\n  props: {\r\n    channels: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const channel = ref(null);\r\n\r\n    // Находим канал по id из списка channels\r\n    for (let i = 0; i < props.channels.length; i++) {\r\n      if (props.channels[i].id === props.id) {\r\n        channel.value = { ...props.channels[i] };\r\n        break;\r\n      }\r\n    }\r\n\r\n    const saveChannel = (updatedChannel) => {\r\n      // Вызываем событие для передачи обновленного канала наверх\r\n      this.$emit('update:channels', updatedChannels);\r\n    };\r\n\r\n    return {\r\n      channel,\r\n      saveChannel\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":";;;uBACEA,mBAAA,CAGM,cAFJC,mBAAA,CAAgD,YAA5C,yBAAuB,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,OAAO,CAACC,EAAE,kBACxCC,YAAA,CAAuDC,uBAAA;IAAxCH,OAAO,EAAED,MAAA,CAAAC,OAAO;IAAGI,MAAI,EAAEL,MAAA,CAAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}