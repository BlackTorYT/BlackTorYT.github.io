{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_channel_form = _resolveComponent(\"channel-form\");\n  const _component_channel_list = _resolveComponent(\"channel-list\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_router_link, {\n    to: \"/channels/create\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Создать\")]),\n    _: 1 /* STABLE */\n  }), $data.isEdit ? (_openBlock(), _createBlock(_component_channel_form, {\n    key: 0,\n    channel: $data.currentChannel,\n    onUpdate: $options.updateChannel,\n    channels: $data.channels,\n    isEdit: true\n  }, null, 8 /* PROPS */, [\"channel\", \"onUpdate\", \"channels\"])) : (_openBlock(), _createBlock(_component_channel_list, {\n    key: 1,\n    channels: $data.channels,\n    onRemove: $options.removeChannel,\n    onRemoveSelected: $options.removeSelectedChannel,\n    onEdit: $options.editChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onRemove\", \"onRemoveSelected\", \"onEdit\"]))]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_","$data","isEdit","_createBlock","_component_channel_form","key","channel","currentChannel","onUpdate","$options","updateChannel","channels","_component_channel_list","onRemove","removeChannel","onRemoveSelected","removeSelectedChannel","onEdit","editChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\ChannelPage.vue"],"sourcesContent":["<template>\n  <div>\n    <router-link to=\"/channels/create\">Создать</router-link>\n    <channel-form v-if=\"isEdit\" :channel=\"currentChannel\" @update=\"updateChannel\" :channels=\"channels\" :isEdit=\"true\"/>\n    <channel-list v-else v-bind:channels=\"channels\" @remove=\"removeChannel\" @removeSelected=\"removeSelectedChannel\" @edit=\"editChannel\"/>\n  </div>\n</template>\n\n<script>\nimport ChannelList from \"@/components/ChannelList.vue\";\nimport ChannelForm from \"@/components/ChannelForm.vue\";\nexport default {\n  components: {\n    ChannelList,\n    ChannelForm\n  },\n  data() {\n    return {\n      channels: [\n        { id: 1, title: \"Telegram Bot\", code: \"TELEGRAM_BOT\", mailing: \"TELEGRAM_BOT\", disc: \"Тг бот\", status: true },\n        { id: 2, title: \"MTS\", code: \"MTS_GW\", mailing: \"SMS\", disc: \"\", status: true }\n      ],\n      isEdit: false,\n      currentChannel: null\n    };\n  },\n  methods: {\n    createChannel(channel) {\n      this.channels.push(channel);\n    },\n    removeChannel(channel) {\n      this.channels = this.channels.filter(c => c.id !== channel.id);\n    },\n    removeSelectedChannel(selectedChannelIds) {\n      this.channels = this.channels.filter(channel => !selectedChannelIds.includes(channel.id));\n    },\n    editChannel(channel) {\n      this.isEdit = true;\n      this.currentChannel = channel;\n    },\n    updateChannel(updatedChannel) {\n      const index = this.channels.findIndex(channel => channel.id === updatedChannel.id);\n      if (index !== -1) {\n        this.channels.splice(index, 1, updatedChannel);\n      }\n      this.isEdit = false;\n      this.currentChannel = null;\n    }\n  }\n};\n</script>\n"],"mappings":";;;;;uBACEA,mBAAA,CAIM,cAHJC,YAAA,CAAwDC,sBAAA;IAA3CC,EAAE,EAAC;EAAkB;IAFtCC,OAAA,EAAAC,QAAA,CAEuC,MAAO,CAF9CC,gBAAA,CAEuC,SAAO,E;IAF9CC,CAAA;MAGwBC,KAAA,CAAAC,MAAM,I,cAA1BC,YAAA,CAAmHC,uBAAA;IAHvHC,GAAA;IAGiCC,OAAO,EAAEL,KAAA,CAAAM,cAAc;IAAGC,QAAM,EAAEC,QAAA,CAAAC,aAAa;IAAGC,QAAQ,EAAEV,KAAA,CAAAU,QAAQ;IAAGT,MAAM,EAAE;iFAC5GC,YAAA,CAAqIS,uBAAA;IAJzIP,GAAA;IAIgCM,QAAQ,EAAEV,KAAA,CAAAU,QAAQ;IAAGE,QAAM,EAAEJ,QAAA,CAAAK,aAAa;IAAGC,gBAAc,EAAEN,QAAA,CAAAO,qBAAqB;IAAGC,MAAI,EAAER,QAAA,CAAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}