{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5e5a9dc1\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"wrapper__channels\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Каналы отправки уведомлений\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"channel__checkbox\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__id\"\n}, \"ID\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__name\"\n}, \"Название\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__code\"\n}, \"Код\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__mailing\"\n}, \"Шлюз рассылки\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__disc\"\n}, \"Описание\", -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__status\"\n}, \"Статус\", -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"th\", {\n  class: \"channel__action\"\n}, \"Действия\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_channel_item = _resolveComponent(\"channel-item\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.removeSelectedChannels && $options.removeSelectedChannels(...args))\n  }, \"Удалить\"), _createElementVNode(\"table\", null, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", _hoisted_3, [_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.toggleAll && $options.toggleAll(...args))\n  }, null, 32 /* NEED_HYDRATION */)]), _hoisted_4, _hoisted_5, _hoisted_6, _hoisted_7, _hoisted_8, _hoisted_9, _hoisted_10])]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.channels, channel => {\n    return _openBlock(), _createBlock(_component_channel_item, {\n      channel: channel,\n      key: channel.id,\n      onRemove: $event => _ctx.$emit('remove', channel),\n      selected: $data.selectedChannels.includes(channel.id),\n      onToggle: $options.toggleSelection\n    }, null, 8 /* PROPS */, [\"channel\", \"onRemove\", \"selected\", \"onToggle\"]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","removeSelectedChannels","_hoisted_3","type","onChange","toggleAll","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_Fragment","_renderList","$props","channels","channel","_createBlock","_component_channel_item","key","id","onRemove","$event","_ctx","$emit","selected","$data","selectedChannels","includes","onToggle","toggleSelection"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\ChannelList.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrapper__channels\">\r\n      <h1>Каналы отправки уведомлений</h1>\r\n      <button @click=\"removeSelectedChannels\">Удалить</button>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th class=\"channel__checkbox\"><input type=\"checkbox\" @change=\"toggleAll\"></th>\r\n            <th class=\"channel__id\">ID</th>\r\n            <th class=\"channel__name\">Название</th>\r\n            <th class=\"channel__code\">Код</th>\r\n            <th class=\"channel__mailing\">Шлюз рассылки</th>\r\n            <th class=\"channel__disc\">Описание</th>\r\n            <th class=\"channel__status\">Статус</th>\r\n            <th class=\"channel__action\">Действия</th>\r\n          </tr>\r\n        </thead>\r\n        <channel-item v-for=\"channel in channels\" v-bind:channel=\"channel\" v-bind:key=\"channel.id\" \r\n          @remove=\"$emit('remove', channel)\" :selected=\"selectedChannels.includes(channel.id)\"\r\n          @toggle=\"toggleSelection\">\r\n        </channel-item>\r\n      </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// Компонент для списка каналов\r\nimport ChannelItem from \"@/components/ChannelItem.vue\"\r\nexport default {\r\n  components: {ChannelItem},\r\n  props: {\r\n    channels: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selectedChannels: []\r\n    };\r\n  },\r\n  computed: {\r\n    allSelected() {\r\n      return this.channels.length && this.selectedChannels.length === this.channels.length;\r\n    }\r\n  },\r\n  methods: {\r\n    toggleSelection(channelId) {\r\n      if (this.selectedChannels.includes(channelId)) {\r\n        this.selectedChannels = this.selectedChannels.filter(id => id !== channelId);\r\n      } else {\r\n        this.selectedChannels.push(channelId);\r\n      }\r\n    },\r\n    toggleAll(event) {\r\n      if (event.target.checked) {\r\n        this.selectedChannels = this.channels.map(channel => channel.id);\r\n      } else {\r\n        this.selectedChannels = [];\r\n      }\r\n    },\r\n    removeSelectedChannels() {\r\n      this.$emit('removeSelected', this.selectedChannels);\r\n      this.selectedChannels = [];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ntable {\r\n  width: 100%;\r\n  border-top: 7px solid rgb(218, 218, 218);\r\n  border-collapse: collapse;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #dddddd;\r\n}\r\n\r\ntd {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\nth {\r\n  text-align: left;\r\n  padding: 10px;\r\n  border: 1px solid rgb(218, 218, 218);\r\n}\r\n\r\n.wrapper__channels {\r\n  background-color: white;\r\n}\r\n\r\n.channel__checkbox {\r\n  width: 36px;\r\n}\r\n\r\n.channel__id {\r\n  width: 40px;\r\n}\r\n\r\n.channel__name {\r\n  width: 150px;\r\n}\r\n\r\n.channel__code {\r\n  width: 200px;\r\n}\r\n\r\n.channel__mailing {\r\n  width: 200px;\r\n}\r\n\r\n.channel__status {\r\n  width: 100px;\r\n}\r\n\r\n.channel__action {\r\n  width: 150px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAmB;gEAC5BC,mBAAA,CAAoC,YAAhC,6BAA2B;;EAKrBD,KAAK,EAAC;AAAmB;gEAC7BC,mBAAA,CAA+B;EAA3BD,KAAK,EAAC;AAAa,GAAC,IAAE;gEAC1BC,mBAAA,CAAuC;EAAnCD,KAAK,EAAC;AAAe,GAAC,UAAQ;gEAClCC,mBAAA,CAAkC;EAA9BD,KAAK,EAAC;AAAe,GAAC,KAAG;gEAC7BC,mBAAA,CAA+C;EAA3CD,KAAK,EAAC;AAAkB,GAAC,eAAa;gEAC1CC,mBAAA,CAAuC;EAAnCD,KAAK,EAAC;AAAe,GAAC,UAAQ;gEAClCC,mBAAA,CAAuC;EAAnCD,KAAK,EAAC;AAAiB,GAAC,QAAM;iEAClCC,mBAAA,CAAyC;EAArCD,KAAK,EAAC;AAAiB,GAAC,UAAQ;;;uBAb5CE,mBAAA,CAqBM,OArBNC,UAqBM,GApBJC,UAAoC,EACpCH,mBAAA,CAAwD;IAA/CI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,sBAAA,IAAAD,QAAA,CAAAC,sBAAA,IAAAF,IAAA,CAAsB;KAAE,SAAO,GAC/CN,mBAAA,CAiBQ,gBAhBNA,mBAAA,CAWQ,gBAVNA,mBAAA,CASK,aARHA,mBAAA,CAA8E,MAA9ES,UAA8E,GAAhDT,mBAAA,CAA2C;IAApCU,IAAI,EAAC,UAAU;IAAEC,QAAM,EAAAN,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAK,SAAA,IAAAL,QAAA,CAAAK,SAAA,IAAAN,IAAA,CAAS;uCACvEO,UAA+B,EAC/BC,UAAuC,EACvCC,UAAkC,EAClCC,UAA+C,EAC/CC,UAAuC,EACvCC,UAAuC,EACvCC,WAAyC,C,wBAG7ClB,mBAAA,CAGemB,SAAA,QApBvBC,WAAA,CAiBwCC,MAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAA5BC,YAAA,CAGeC,uBAAA;MAHkCF,OAAO,EAAEA,OAAO;MAASG,GAAG,EAAEH,OAAO,CAACI,EAAE;MACtFC,QAAM,EAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK,WAAWR,OAAO;MAAIS,QAAQ,EAAEC,KAAA,CAAAC,gBAAgB,CAACC,QAAQ,CAACZ,OAAO,CAACI,EAAE;MACjFS,QAAM,EAAE9B,QAAA,CAAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}