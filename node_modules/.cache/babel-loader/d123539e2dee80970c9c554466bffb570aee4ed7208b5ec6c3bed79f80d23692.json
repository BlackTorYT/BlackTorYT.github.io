{"ast":null,"code":"export default {\n  props: {\n    channels: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      channel: {\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      },\n      errors: {\n        title: '',\n        code: ''\n      }\n    };\n  },\n  methods: {\n    getNextId() {\n      if (!this.channels || this.channels.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.channels.map(channel => channel.id));\n      return maxId + 1;\n    },\n    createChannel() {\n      this.clearErrors();\n      if (!this.channel.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n      if (!this.channel.code) {\n        this.errors.code = 'Уникальный код обязательно для заполнения';\n      }\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n      const newChannelId = this.getNextId();\n      const newChannel = {\n        ...this.channel,\n        id: newChannelId\n      };\n      this.$emit('create', newChannel);\n      this.resetForm();\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    resetForm() {\n      this.channel = {\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      };\n    }\n  }\n};","map":{"version":3,"names":["props","channels","type","Array","required","data","channel","title","code","mailing","disc","json","status","errors","methods","getNextId","length","maxId","Math","max","map","id","createChannel","clearErrors","newChannelId","newChannel","$emit","resetForm"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\ChannelForm.vue"],"sourcesContent":["<template>\n    <form class=\"wrapper\" @submit.prevent=\"createChannel\" style=\"background-color: white;\">\n      <div class=\"wrapper__head\">\n        <h1>Создание канала отправки: </h1>\n        <span>Панель управления / Каналы отправки / Создание канала отправки </span>\n      </div>\n      <div class=\"name\">\n        Название\n        <my-input type=\"text\" class=\"input\" v-model=\"channel.title\" />\n        <span v-if=\"errors.title\" class=\"error\">{{ errors.title }}</span>\n      </div>\n      <div class=\"uniqueCode\">\n        Уникальный код поля\n        <my-input type=\"text\" class=\"input\" v-model=\"channel.code\" />\n        <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span>\n      </div>\n      <div class=\"mailing\">\n        Обработчик\n        <select class=\"input\" v-model=\"channel.mailing\">\n          <option value=\"Telegram Bot\">Telegram Bot</option>\n          <option value=\"SMS\">SMS</option>\n        </select>\n      </div>\n      <div class=\"disc\">\n        Описание\n        <my-input type=\"text\" class=\"input\" v-model=\"channel.disc\" />\n      </div>\n      <div class=\"json\">\n        Настройки JSON\n        <my-input type=\"text\" class=\"input\" v-model=\"channel.json\" />\n      </div>\n      <div class=\"active\">\n        Канал активен?\n        <select class=\"input\" v-model=\"channel.status\">\n          <option :value=\"true\">Да</option>\n          <option :value=\"false\">Нет</option>\n        </select>\n      </div>\n      <button class=\"save__btn\">Сохранить</button>\n    </form>\n  </template>\n  \n  <script>\n  export default {\n    props: {\n      channels: {\n        type: Array,\n        required: true\n      }\n    },\n    data() {\n      return {\n        channel: {\n          title: '',\n          code: '',\n          mailing: 'Telegram Bot',\n          disc: '',\n          json: '{ \"telegram_token\":\"\"}',\n          status: true\n        },\n        errors: {\n          title: '',\n          code: ''\n        }\n      };\n    },\n    methods: {\n      getNextId() {\n        if (!this.channels || this.channels.length === 0) {\n          return 1;\n        }\n        const maxId = Math.max(...this.channels.map(channel => channel.id));\n        return maxId + 1;\n      },\n      createChannel() {\n        this.clearErrors();\n  \n        if (!this.channel.title) {\n          this.errors.title = 'Название обязательно для заполнения';\n        }\n  \n        if (!this.channel.code) {\n          this.errors.code = 'Уникальный код обязательно для заполнения';\n        }\n  \n        if (this.errors.title || this.errors.code) {\n          return;\n        }\n  \n        const newChannelId = this.getNextId();\n        const newChannel = { ...this.channel, id: newChannelId };\n        this.$emit('create', newChannel);\n        this.resetForm();\n      },\n      clearErrors() {\n        this.errors = {\n          title: '',\n          code: ''\n        };\n      },\n      resetForm() {\n        this.channel = {\n          title: '',\n          code: '',\n          mailing: 'Telegram Bot',\n          disc: '',\n          json: '{ \"telegram_token\":\"\"}',\n          status: true\n        };\n      }\n    }\n  };\n  </script>\n\n<style scoped>\n.save__btn {\n  display: block;\n  width: 100%;\n  background-color: #3386f3;\n  color: white;\n  border: none;\n  padding: 10px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\n.input {\n  margin-bottom: 10px;\n  padding: 8px;\n}\n\n.error {\n  color: red;\n  font-size: 14px;\n}\n</style>\n"],"mappings":"AA2CE,eAAe;EACbA,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,wBAAwB;QAC9BC,MAAM,EAAE;MACV,CAAC;MACDC,MAAM,EAAE;QACNN,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACDM,OAAO,EAAE;IACPC,SAASA,CAAA,EAAG;MACV,IAAI,CAAC,IAAI,CAACd,QAAO,IAAK,IAAI,CAACA,QAAQ,CAACe,MAAK,KAAM,CAAC,EAAE;QAChD,OAAO,CAAC;MACV;MACA,MAAMC,KAAI,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACmB,GAAG,CAACd,OAAM,IAAKA,OAAO,CAACe,EAAE,CAAC,CAAC;MACnE,OAAOJ,KAAI,GAAI,CAAC;IAClB,CAAC;IACDK,aAAaA,CAAA,EAAG;MACd,IAAI,CAACC,WAAW,CAAC,CAAC;MAElB,IAAI,CAAC,IAAI,CAACjB,OAAO,CAACC,KAAK,EAAE;QACvB,IAAI,CAACM,MAAM,CAACN,KAAI,GAAI,qCAAqC;MAC3D;MAEA,IAAI,CAAC,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;QACtB,IAAI,CAACK,MAAM,CAACL,IAAG,GAAI,2CAA2C;MAChE;MAEA,IAAI,IAAI,CAACK,MAAM,CAACN,KAAI,IAAK,IAAI,CAACM,MAAM,CAACL,IAAI,EAAE;QACzC;MACF;MAEA,MAAMgB,YAAW,GAAI,IAAI,CAACT,SAAS,CAAC,CAAC;MACrC,MAAMU,UAAS,GAAI;QAAE,GAAG,IAAI,CAACnB,OAAO;QAAEe,EAAE,EAAEG;MAAa,CAAC;MACxD,IAAI,CAACE,KAAK,CAAC,QAAQ,EAAED,UAAU,CAAC;MAChC,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB,CAAC;IACDJ,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACV,MAAK,GAAI;QACZN,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;IACH,CAAC;IACDmB,SAASA,CAAA,EAAG;MACV,IAAI,CAACrB,OAAM,GAAI;QACbC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,wBAAwB;QAC9BC,MAAM,EAAE;MACV,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}