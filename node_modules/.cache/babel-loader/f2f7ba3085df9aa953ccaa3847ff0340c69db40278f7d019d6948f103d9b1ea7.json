{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", null, \"Создать канал\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_channel_list = _resolveComponent(\"channel-list\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_router_link, {\n    to: \"/channels/create\"\n  }, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_channel_list, {\n    channels: $data.channels,\n    onRemove: $options.removeChannel,\n    onRemoveSelected: $options.removeSelectedChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onRemove\", \"onRemoveSelected\"])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_router_link","to","default","_withCtx","_hoisted_1","_","_component_channel_list","channels","$data","onRemove","$options","removeChannel","onRemoveSelected","removeSelectedChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\ChannelPage.vue"],"sourcesContent":["<template>\n  <div>\n    <router-link to=\"/channels/create\">\n      <button>Создать канал</button>\n    </router-link>\n    <channel-list :channels=\"channels\" @remove=\"removeChannel\" @removeSelected=\"removeSelectedChannel\" />\n  </div>\n</template>\n\n<script>\nimport ChannelList from \"@/components/ChannelList.vue\";\n\nexport default {\n  components: {\n    ChannelList\n  },\n  data() {\n    return {\n      channels: [\n        { id: 1, title: \"Telegram Bot\", code: \"TELEGRAM_BOT\", mailing: \"TELEGRAM_BOT\", disc: \"Тг бот\", status: true },\n        { id: 2, title: \"MTS\", code: \"MTS_GW\", mailing: \"SMS\", disc: \"\", status: true }\n      ]\n    };\n  },\n  methods: {\n    createChannel(channel) {\n      this.channels.push(channel);\n    },\n    removeChannel(channel) {\n      this.channels = this.channels.filter(c => c.id !== channel.id);\n    },\n    removeSelectedChannel(selectedChannelIds) {\n      this.channels = this.channels.filter(channel => !selectedChannelIds.includes(channel.id));\n    }\n  },\n  provide() {\n    return {\n      createChannel: this.createChannel // предоставляем метод createChannel для дочерних компонентов\n    };\n  }\n};\n</script>"],"mappings":";gCAGMA,mBAAA,CAA8B,gBAAtB,eAAa;;;;uBAFzBC,mBAAA,CAKM,cAJJC,YAAA,CAEcC,sBAAA;IAFDC,EAAE,EAAC;EAAkB;IAFtCC,OAAA,EAAAC,QAAA,CAGM,MAA8B,CAA9BC,UAA8B,C;IAHpCC,CAAA;MAKIN,YAAA,CAAqGO,uBAAA;IAAtFC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGE,QAAM,EAAEC,QAAA,CAAAC,aAAa;IAAGC,gBAAc,EAAEF,QAAA,CAAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}