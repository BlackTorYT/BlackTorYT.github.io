{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_channel_form_page = _resolveComponent(\"channel-form-page\");\n  const _component_channel_list = _resolveComponent(\"channel-list\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_channel_form_page, {\n    channels: $data.channels,\n    onCreateChannel: $options.createChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onCreateChannel\"]), _createVNode(_component_channel_list, {\n    channels: $data.channels,\n    onRemove: $options.removeChannel,\n    onRemoveSelected: $options.removeSelectedChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onRemove\", \"onRemoveSelected\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_channel_form_page","channels","$data","onCreateChannel","$options","createChannel","_component_channel_list","onRemove","removeChannel","onRemoveSelected","removeSelectedChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\ChannelPage.vue"],"sourcesContent":["<template>\n  <div>\n    <channel-form-page :channels=\"channels\" @createChannel=\"createChannel\" />\n    <channel-list :channels=\"channels\" @remove=\"removeChannel\" @removeSelected=\"removeSelectedChannel\" />\n  </div>\n</template>\n\n<script>\nimport ChannelList from \"@/components/ChannelList.vue\";\nimport ChannelFormPage from \"@/pages/ChannelFormPage.vue\"; // Обновление импорта\n\nexport default {\n  components: {\n    ChannelList,\n    ChannelFormPage // Регистрируем компонент\n  },\n  name: 'ChannelPage',\n  data() {\n    return {\n      channels: [\n        { id: 1, title: \"Telegram Bot\", code: \"TELEGRAM_BOT\", mailing: \"TELEGRAM_BOT\", disc: \"Тг бот\", status: true },\n        { id: 2, title: \"MTS\", code: \"MTS_GW\", mailing: \"SMS\", disc: \"\", status: true }\n      ]\n    };\n  },\n  methods: {\n    createChannel(channel) {\n      this.channels.push(channel);\n    },\n    removeChannel(channel) {\n      this.channels = this.channels.filter(c => c.id !== channel.id);\n    },\n    removeSelectedChannel(selectedChannelIds) {\n      this.channels = this.channels.filter(channel => !selectedChannelIds.includes(channel.id));\n    }\n  }\n};\n</script>\n\n<style>\n\n\n.header {\n  height: 56px;\n  padding: 16px;\n  background-color: white;\n}\n\n.nav__list {\n  display: flex;\n  justify-content: space-between;\n}\n\n.nav__item__notification {\n  display: flex;\n  justify-content: space-between;\n  width: 230px;\n}\n\n#nav__item_left {\n  width: 200px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.exit__img {\n  margin-right: 10px;\n}\n\n.nav__item__exit {\n  width: 200px;\n}\n\n\n\n\n</style>\n"],"mappings":";;;;uBACEA,mBAAA,CAGM,cAFJC,YAAA,CAAyEC,4BAAA;IAArDC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGE,eAAa,EAAEC,QAAA,CAAAC;4DACxDN,YAAA,CAAqGO,uBAAA;IAAtFL,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGM,QAAM,EAAEH,QAAA,CAAAI,aAAa;IAAGC,gBAAc,EAAEL,QAAA,CAAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}