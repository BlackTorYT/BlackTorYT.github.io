{"ast":null,"code":"export default {\n  props: {\n    initialChannel: {\n      type: Object,\n      default: () => ({\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      })\n    }\n  },\n  data() {\n    return {\n      channel: {\n        ...this.initialChannel\n      },\n      // Инициализация channel с помощью initialChannel\n      errors: {\n        title: '',\n        code: ''\n      }\n    };\n  },\n  methods: {\n    getNextId() {\n      if (this.channels.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.channels.map(channel => channel.id));\n      return maxId + 1;\n    },\n    createChannel() {\n      this.clearErrors();\n      if (!this.channel.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n      if (!this.channel.code) {\n        this.errors.code = 'Уникальный код обязательно для заполнения';\n      }\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n      const newChannelId = this.getNextId();\n      const newChannel = {\n        ...this.channel,\n        id: newChannelId\n      };\n      this.$emit('create', newChannel);\n      this.resetForm();\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    resetForm() {\n      this.channel = {\n        ...this.initialChannel // Сбрасываем форму до начального состояния initialChannel\n      };\n    }\n  },\n  watch: {\n    initialChannel: {\n      deep: true,\n      handler(newVal) {\n        // Обновляем локальную копию channel при изменении initialChannel извне\n        this.channel = {\n          ...newVal\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","initialChannel","type","Object","default","title","code","mailing","disc","json","status","data","channel","errors","methods","getNextId","channels","length","maxId","Math","max","map","id","createChannel","clearErrors","newChannelId","newChannel","$emit","resetForm","watch","deep","handler","newVal"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\ChannelForm.vue"],"sourcesContent":["<template>\n    <form class=\"wrapper\" @submit.prevent=\"createChannel\" style=\"background-color: white;\">\n      <div class=\"wrapper__head\">\n        <h1>{{ isEdit ? 'Редактирование' : 'Создание' }} канала отправки</h1>\n        <span>Панель управления / Каналы отправки / {{ isEdit ? 'Редактирование' : 'Создание' }} канала отправки </span>\n      </div>\n      <div class=\"name\">\n        Название \n        <my-input type=\"text\" class=\"input\" v-model=\"channel.title\"/>\n        <span v-if=\"errors.title\" class=\"error\">{{ errors.title }}</span>\n    </div>\n      <div class=\"uniqueCode\">\n        Уникальный код поля\n        <my-input type=\"text\" class=\"input\" v-model=\"localChannel.code\" />\n        <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span>\n      </div>\n      <div class=\"mailing\">\n        Обработчик\n        <select class=\"input\" v-model=\"localChannel.mailing\">\n          <option value=\"Telegram Bot\">Telegram Bot</option>\n          <option value=\"SMS\">SMS</option>\n        </select>\n      </div>\n      <div class=\"disc\">\n        Описание\n        <my-input type=\"text\" class=\"input\" v-model=\"localChannel.disc\" />\n      </div>\n      <div class=\"json\">\n        Настройки JSON\n        <my-input type=\"text\" class=\"input\" v-model=\"localChannel.json\" />\n      </div>\n      <div class=\"active\">\n        Канал активен?\n        <select class=\"input\" v-model=\"localChannel.status\">\n          <option :value=\"true\">Да</option>\n          <option :value=\"false\">Нет</option>\n        </select>\n      </div>\n      <button type=\"submit\" class=\"save__btn\">Сохранить</button>\n    </form>\n  </template>\n  \n<script>\n\nexport default {\n  props: {\n    initialChannel: {\n      type: Object,\n      default: () => ({\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      })\n    }\n  },\n  data() {\n    return {\n      channel: { ...this.initialChannel }, // Инициализация channel с помощью initialChannel\n      errors: {\n        title: '',\n        code: ''\n      }\n    };\n  },\n  methods: {\n    getNextId() {\n      if (this.channels.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.channels.map(channel => channel.id));\n      return maxId + 1;\n    },\n    createChannel() {\n      this.clearErrors();\n\n      if (!this.channel.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n\n      if (!this.channel.code) {\n        this.errors.code = 'Уникальный код обязательно для заполнения';\n      }\n\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n\n      const newChannelId = this.getNextId();\n      const newChannel = { ...this.channel, id: newChannelId };\n      this.$emit('create', newChannel);\n      this.resetForm();\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    resetForm() {\n      this.channel = {\n        ...this.initialChannel // Сбрасываем форму до начального состояния initialChannel\n      };\n    }\n  },\n  watch: {\n    initialChannel: {\n      deep: true,\n      handler(newVal) {\n        // Обновляем локальную копию channel при изменении initialChannel извне\n        this.channel = { ...newVal };\n      }\n    }\n  }\n};\n</script>\n  \n\n<style scoped>\n.save__btn {\n  display: block;\n  width: 100%;\n  background-color: #3386f3;\n  color: white;\n  border: none;\n  padding: 10px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\n.input {\n  margin-bottom: 10px;\n  padding: 8px;\n}\n\n.error {\n  color: red;\n  font-size: 14px;\n}\n</style>\n"],"mappings":"AA4CA,eAAe;EACbA,KAAK,EAAE;IACLC,cAAc,EAAE;MACdC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,MAAO;QACdC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,wBAAwB;QAC9BC,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QAAE,GAAG,IAAI,CAACX;MAAe,CAAC;MAAE;MACrCY,MAAM,EAAE;QACNR,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR;IACF,CAAC;EACH,CAAC;EACDQ,OAAO,EAAE;IACPC,SAASA,CAAA,EAAG;MACV,IAAI,IAAI,CAACC,QAAQ,CAACC,MAAK,KAAM,CAAC,EAAE;QAC9B,OAAO,CAAC;MACV;MACA,MAAMC,KAAI,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACT,OAAM,IAAKA,OAAO,CAACU,EAAE,CAAC,CAAC;MACnE,OAAOJ,KAAI,GAAI,CAAC;IAClB,CAAC;IACDK,aAAaA,CAAA,EAAG;MACd,IAAI,CAACC,WAAW,CAAC,CAAC;MAElB,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACP,KAAK,EAAE;QACvB,IAAI,CAACQ,MAAM,CAACR,KAAI,GAAI,qCAAqC;MAC3D;MAEA,IAAI,CAAC,IAAI,CAACO,OAAO,CAACN,IAAI,EAAE;QACtB,IAAI,CAACO,MAAM,CAACP,IAAG,GAAI,2CAA2C;MAChE;MAEA,IAAI,IAAI,CAACO,MAAM,CAACR,KAAI,IAAK,IAAI,CAACQ,MAAM,CAACP,IAAI,EAAE;QACzC;MACF;MAEA,MAAMmB,YAAW,GAAI,IAAI,CAACV,SAAS,CAAC,CAAC;MACrC,MAAMW,UAAS,GAAI;QAAE,GAAG,IAAI,CAACd,OAAO;QAAEU,EAAE,EAAEG;MAAa,CAAC;MACxD,IAAI,CAACE,KAAK,CAAC,QAAQ,EAAED,UAAU,CAAC;MAChC,IAAI,CAACE,SAAS,CAAC,CAAC;IAClB,CAAC;IACDJ,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACX,MAAK,GAAI;QACZR,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;IACH,CAAC;IACDsB,SAASA,CAAA,EAAG;MACV,IAAI,CAAChB,OAAM,GAAI;QACb,GAAG,IAAI,CAACX,cAAa,CAAE;MACzB,CAAC;IACH;EACF,CAAC;EACD4B,KAAK,EAAE;IACL5B,cAAc,EAAE;MACd6B,IAAI,EAAE,IAAI;MACVC,OAAOA,CAACC,MAAM,EAAE;QACd;QACA,IAAI,CAACpB,OAAM,GAAI;UAAE,GAAGoB;QAAO,CAAC;MAC9B;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}