{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport _imports_0 from './assets/burger.png';\nconst _hoisted_1 = {\n  class: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<header class=\\\"header\\\"><div class=\\\"header__nav\\\"><nav class=\\\"nav\\\"><ul class=\\\"nav__list\\\"><li class=\\\"nav__item\\\" id=\\\"nav__item_left\\\"><img class=\\\"burger\\\" src=\\\"\" + _imports_0 + \"\\\" alt=\\\"menu\\\">Панель управления</li><div class=\\\"nav__item__notification\\\"><li class=\\\"nav__item\\\"><img class=\\\"notification__img\\\" src=\\\"\" + _imports_0 + \"\\\" alt=\\\"notification\\\"></li><li class=\\\"nav__item\\\" id=\\\"nav__item__exit\\\"><img class=\\\"exit__img\\\" src=\\\"\" + _imports_0 + \"\\\" alt=\\\"exit\\\">Выйти из аккаунта</li></div></ul></nav></div></header>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_router_view, {\n    channels: $data.channels,\n    onCreateChannel: $options.createChannel,\n    onRemoveChannel: $options.removeChannel,\n    onRemoveSelectedChannel: $options.removeSelectedChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onCreateChannel\", \"onRemoveChannel\", \"onRemoveSelectedChannel\"])]);\n}","map":{"version":3,"names":["_imports_0","class","_createStaticVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_router_view","channels","$data","onCreateChannel","$options","createChannel","onRemoveChannel","removeChannel","onRemoveSelectedChannel","removeSelectedChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\App.vue"],"sourcesContent":["<!-- src/App.vue -->\n<template>\n  <div class=\"app\">\n    <header class=\"header\">\n      <div class=\"header__nav\">\n        <nav class=\"nav\">\n          <ul class=\"nav__list\">\n            <li class=\"nav__item\" id=\"nav__item_left\"><img class=\"burger\" src=\"./assets/burger.png\" alt=\"menu\">Панель управления</li>\n            <div class=\"nav__item__notification\">\n              <li class=\"nav__item\"><img class=\"notification__img\" src=\"./assets/burger.png\" alt=\"notification\"></li>\n              <li class=\"nav__item\" id=\"nav__item__exit\"><img class=\"exit__img\" src=\"./assets/burger.png\" alt=\"exit\">Выйти из аккаунта</li>\n            </div>\n          </ul>\n        </nav>\n      </div>\n    </header>\n\n    <router-view :channels=\"channels\" @createChannel=\"createChannel\" @removeChannel=\"removeChannel\" @removeSelectedChannel=\"removeSelectedChannel\"></router-view>\n\n  </div>\n</template>\n\n<script>\nimport { reactive } from 'vue';\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      channels: reactive([\n        { id: 1, title: \"Telegram Bot\", code: \"TELEGRAM_BOT\", mailing: \"TELEGRAM_BOT\", disc: \"Тг бот\", status: true },\n        { id: 2, title: \"MTS\", code: \"MTS_GW\", mailing: \"SMS\", disc: \"\", status: true }\n      ])\n    };\n  },\n  methods: {\n    createChannel(channel) {\n      this.channels.push(channel);\n    },\n    removeChannel(channel) {\n      this.channels = this.channels.filter(c => c.id !== channel.id);\n    },\n    removeSelectedChannel(selectedChannelIds) {\n      this.channels = this.channels.filter(channel => !selectedChannelIds.includes(channel.id));\n    }\n  }\n};\n</script>\n\n<style>\n/* Ваши стили */\n</style>\n"],"mappings":";OAO0EA,UAAyB;;EAL5FC,KAAK,EAAC;AAAK;gCAFlBC,kBAAA,+KAAAF,UAAA,oJAAAA,UAAA,mHAAAA,UAAA;;;uBAEEG,mBAAA,CAiBM,OAjBNC,UAiBM,GAhBJC,UAYS,EAETC,YAAA,CAA6JC,sBAAA;IAA/IC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGE,eAAa,EAAEC,QAAA,CAAAC,aAAa;IAAGC,eAAa,EAAEF,QAAA,CAAAG,aAAa;IAAGC,uBAAqB,EAAEJ,QAAA,CAAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}