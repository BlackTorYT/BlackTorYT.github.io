{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { VTooltip, VPopover } from 'v-tooltip';\nexport default {\n  components: {\n    VTooltip,\n    VPopover\n  },\n  props: {\n    pattern: {\n      type: Object,\n      default: () => ({\n        title: '',\n        code: '',\n        pattern: '',\n        type: ''\n      })\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    patterns: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      localPattern: {\n        ...this.pattern\n      },\n      errors: {\n        title: '',\n        code: ''\n      },\n      tooltipVisible: false\n    };\n  },\n  methods: {\n    handleSubmitPattern() {\n      this.clearErrors();\n      if (!this.localPattern.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n      if (!this.localPattern.code) {\n        this.errors.code = 'Код обязателен для заполнения';\n      }\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n      if (this.isEdit) {\n        this.$emit('update', this.localPattern);\n      } else {\n        this.$emit('create', {\n          ...this.localPattern,\n          id: this.getNextId()\n        });\n      }\n      this.$router.push('/patterns');\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    highlightPattern(text) {\n      const regex = /(@getCustomFieldValue)/g;\n      return text.replace(regex, '<span class=\"highlighted\" @mouseover=\"showTooltip\" @mouseleave=\"hideTooltip\">$1</span>');\n    },\n    showTooltip(event) {\n      if (event.target.classList.contains('highlighted')) {\n        this.tooltipVisible = true;\n        this.$refs.tooltip.$el.style.top = `${event.clientY + 5}px`;\n        this.$refs.tooltip.$el.style.left = `${event.clientX + 5}px`;\n      }\n    },\n    hideTooltip() {\n      this.tooltipVisible = false;\n    },\n    getNextId() {\n      if (this.patterns.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.patterns.map(pattern => pattern.id));\n      return maxId + 1;\n    }\n  }\n};","map":{"version":3,"names":["VTooltip","VPopover","components","props","pattern","type","Object","default","title","code","isEdit","Boolean","patterns","Array","required","data","localPattern","errors","tooltipVisible","methods","handleSubmitPattern","clearErrors","$emit","id","getNextId","$router","push","highlightPattern","text","regex","replace","showTooltip","event","target","classList","contains","$refs","tooltip","$el","style","top","clientY","left","clientX","hideTooltip","length","maxId","Math","max","map"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\PatternForm.vue"],"sourcesContent":["<template>\r\n  <form class=\"wrapper\" @submit.prevent=\"handleSubmitPattern\" style=\"background-color: white;\">\r\n    <div class=\"wrapper__head\">\r\n      <h1>{{ isEdit ? 'Редактирование' : 'Создание' }} шаблона сообщения</h1>\r\n      <span>Панель управления / Шаблоны сообщений / {{ isEdit ? 'Редактирование' : 'Создание' }} канала отправки </span>\r\n    </div>\r\n    <div class=\"name\">\r\n      Название\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.title\" />\r\n      <span v-if=\"errors.name\" class=\"error\">{{ errors.name }}</span>\r\n    </div>\r\n    <div class=\"phone\">\r\n      Код\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.code\" />\r\n      <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span>\r\n    </div>\r\n    <div class=\"username\">\r\n      Шаблон сообщения\r\n      <div v-html=\"highlightPattern(localPattern.pattern)\" @mouseover=\"showTooltip\" @mouseleave=\"hideTooltip\"></div>\r\n      <v-popover v-if=\"tooltipVisible\" ref=\"tooltip\" :placement=\"'top'\">\r\n        <template v-slot:popover>\r\n          <div class=\"tooltip-content\">\r\n            Это переменная, которая будет заменена на значение во время отправки сообщения.\r\n          </div>\r\n        </template>\r\n      </v-popover>\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.pattern\" />\r\n    </div>\r\n    <div class=\"tg\">\r\n      Тип события\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.type\" />\r\n    </div>\r\n    <button class=\"save__btn\">{{ isEdit ? 'Сохранить изменения' : 'Создать' }}</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport { VTooltip, VPopover } from 'v-tooltip';\r\n\r\nexport default {\r\n  components: {\r\n    VTooltip,\r\n    VPopover\r\n  },\r\n  props: {\r\n    pattern: {\r\n      type: Object,\r\n      default: () => ({\r\n        title: '',\r\n        code: '',\r\n        pattern: '',\r\n        type: ''\r\n      })\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    patterns: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      localPattern: { ...this.pattern },\r\n      errors: {\r\n        title: '',\r\n        code: ''\r\n      },\r\n      tooltipVisible: false\r\n    };\r\n  },\r\n  methods: {\r\n    handleSubmitPattern() {\r\n      this.clearErrors();\r\n\r\n      if (!this.localPattern.title) {\r\n        this.errors.title = 'Название обязательно для заполнения';\r\n      }\r\n\r\n      if (!this.localPattern.code) {\r\n        this.errors.code = 'Код обязателен для заполнения';\r\n      }\r\n\r\n      if (this.errors.title || this.errors.code) {\r\n        return;\r\n      }\r\n\r\n      if (this.isEdit) {\r\n        this.$emit('update', this.localPattern);\r\n      } else {\r\n        this.$emit('create', { ...this.localPattern, id: this.getNextId() });\r\n      }\r\n      this.$router.push('/patterns');\r\n    },\r\n    clearErrors() {\r\n      this.errors = {\r\n        title: '',\r\n        code: ''\r\n      };\r\n    },\r\n    highlightPattern(text) {\r\n      const regex = /(@getCustomFieldValue)/g;\r\n      return text.replace(regex, '<span class=\"highlighted\" @mouseover=\"showTooltip\" @mouseleave=\"hideTooltip\">$1</span>');\r\n    },\r\n    showTooltip(event) {\r\n      if (event.target.classList.contains('highlighted')) {\r\n        this.tooltipVisible = true;\r\n        this.$refs.tooltip.$el.style.top = `${event.clientY + 5}px`;\r\n        this.$refs.tooltip.$el.style.left = `${event.clientX + 5}px`;\r\n      }\r\n    },\r\n    hideTooltip() {\r\n      this.tooltipVisible = false;\r\n    },\r\n    getNextId() {\r\n      if (this.patterns.length === 0) {\r\n        return 1;\r\n      }\r\n      const maxId = Math.max(...this.patterns.map(pattern => pattern.id));\r\n      return maxId + 1;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.save__btn {\r\n  display: block;\r\n  width: 100%;\r\n  background-color: #3386f3;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.input {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  font-size: 14px;\r\n}\r\n\r\n.highlighted {\r\n  background-color: yellow;\r\n  cursor: pointer;\r\n}\r\n\r\n.tooltip-content {\r\n  background-color: #f0f0f0;\r\n  border: 1px solid #ccc;\r\n  padding: 5px;\r\n  border-radius: 3px;\r\n  max-width: 200px;\r\n  text-align: left;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":";AAqCA,SAASA,QAAQ,EAAEC,QAAO,QAAS,WAAW;AAE9C,eAAe;EACbC,UAAU,EAAE;IACVF,QAAQ;IACRC;EACF,CAAC;EACDE,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,MAAO;QACdC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRL,OAAO,EAAE,EAAE;QACXC,IAAI,EAAE;MACR,CAAC;IACH,CAAC;IACDK,MAAM,EAAE;MACNL,IAAI,EAAEM,OAAO;MACbJ,OAAO,EAAE;IACX,CAAC;IACDK,QAAQ,EAAE;MACRP,IAAI,EAAEQ,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QAAE,GAAG,IAAI,CAACZ;MAAQ,CAAC;MACjCa,MAAM,EAAE;QACNT,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;MACDS,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,mBAAmBA,CAAA,EAAG;MACpB,IAAI,CAACC,WAAW,CAAC,CAAC;MAElB,IAAI,CAAC,IAAI,CAACL,YAAY,CAACR,KAAK,EAAE;QAC5B,IAAI,CAACS,MAAM,CAACT,KAAI,GAAI,qCAAqC;MAC3D;MAEA,IAAI,CAAC,IAAI,CAACQ,YAAY,CAACP,IAAI,EAAE;QAC3B,IAAI,CAACQ,MAAM,CAACR,IAAG,GAAI,+BAA+B;MACpD;MAEA,IAAI,IAAI,CAACQ,MAAM,CAACT,KAAI,IAAK,IAAI,CAACS,MAAM,CAACR,IAAI,EAAE;QACzC;MACF;MAEA,IAAI,IAAI,CAACC,MAAM,EAAE;QACf,IAAI,CAACY,KAAK,CAAC,QAAQ,EAAE,IAAI,CAACN,YAAY,CAAC;MACzC,OAAO;QACL,IAAI,CAACM,KAAK,CAAC,QAAQ,EAAE;UAAE,GAAG,IAAI,CAACN,YAAY;UAAEO,EAAE,EAAE,IAAI,CAACC,SAAS,CAAC;QAAE,CAAC,CAAC;MACtE;MACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;IAChC,CAAC;IACDL,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACJ,MAAK,GAAI;QACZT,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;IACH,CAAC;IACDkB,gBAAgBA,CAACC,IAAI,EAAE;MACrB,MAAMC,KAAI,GAAI,yBAAyB;MACvC,OAAOD,IAAI,CAACE,OAAO,CAACD,KAAK,EAAE,wFAAwF,CAAC;IACtH,CAAC;IACDE,WAAWA,CAACC,KAAK,EAAE;MACjB,IAAIA,KAAK,CAACC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;QAClD,IAAI,CAACjB,cAAa,GAAI,IAAI;QAC1B,IAAI,CAACkB,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,GAAE,GAAI,GAAGR,KAAK,CAACS,OAAM,GAAI,CAAC,IAAI;QAC3D,IAAI,CAACL,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACG,IAAG,GAAI,GAAGV,KAAK,CAACW,OAAM,GAAI,CAAC,IAAI;MAC9D;IACF,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAAC1B,cAAa,GAAI,KAAK;IAC7B,CAAC;IACDM,SAASA,CAAA,EAAG;MACV,IAAI,IAAI,CAACZ,QAAQ,CAACiC,MAAK,KAAM,CAAC,EAAE;QAC9B,OAAO,CAAC;MACV;MACA,MAAMC,KAAI,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACpC,QAAQ,CAACqC,GAAG,CAAC7C,OAAM,IAAKA,OAAO,CAACmB,EAAE,CAAC,CAAC;MACnE,OAAOuB,KAAI,GAAI,CAAC;IAClB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}