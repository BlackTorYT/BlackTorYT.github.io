{"ast":null,"code":"export default {\n  props: {\n    channels: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      channel: {\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      },\n      errors: {\n        title: '',\n        code: ''\n      }\n    };\n  },\n  methods: {\n    getNextId() {\n      if (this.channels.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.channels.map(channel => channel.id));\n      return maxId + 1;\n    },\n    createChannel() {\n      this.clearErrors();\n      if (!this.channel.title) {\n        this.errors.title = 'Название обязательно для заполнения';\n      }\n      if (!this.channel.code) {\n        this.errors.code = 'Уникальный код обязательно для заполнения';\n      }\n      if (this.errors.title || this.errors.code) {\n        return;\n      }\n      const newChannelId = this.getNextId();\n      const newChannel = {\n        ...this.channel,\n        id: newChannelId\n      };\n      this.$emit('create', newChannel);\n      this.resetForm();\n    },\n    clearErrors() {\n      this.errors = {\n        title: '',\n        code: ''\n      };\n    },\n    resetForm() {\n      this.channel = {\n        title: '',\n        code: '',\n        mailing: 'Telegram Bot',\n        disc: '',\n        json: '{ \"telegram_token\":\"\"}',\n        status: true\n      };\n    }\n  }\n};","map":{"version":3,"names":["props","channels","type","Array","required","data","channel","title","code","mailing","disc","json","status","errors","methods","getNextId","length","maxId","Math","max","map","id","createChannel","clearErrors","newChannelId","newChannel","$emit","resetForm"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\ChannelForm.vue"],"sourcesContent":["<template>\r\n  <form class=\"wrapper\" @submit.prevent=\"createChannel\" style=\"background-color: white;\">\r\n      <div class=\"wrapper__head\">\r\n          <h1>Создание канала отправки: </h1>\r\n          <span>Панель управления / Каналы отправки / Создание канала отправки </span>\r\n      </div>\r\n      <div class=\"name\">\r\n          Название \r\n          <my-input type=\"text\" class=\"input\" v-model=\"channel.title\"/>\r\n          <span v-if=\"errors.title\" class=\"error\">{{ errors.title }}</span>\r\n      </div>\r\n      <div class=\"uniqueCode\">\r\n          Уникальный код поля \r\n          <my-input type=\"text\" class=\"input\" v-model=\"channel.code\"/>\r\n          <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span>\r\n      </div>\r\n      <div class=\"mailing\">\r\n          Обработчик \r\n          <select class=\"input\" v-model=\"channel.mailing\">\r\n              <option value=\"Telegram Bot\">Telegram Bot</option>\r\n              <option value=\"SMS\">SMS</option>\r\n          </select>\r\n      </div>\r\n      <div class=\"disc\">\r\n          Описание \r\n          <my-input type=\"text\" class=\"input\" v-model=\"channel.disc\"/>\r\n      </div>\r\n      <div class=\"json\">\r\n          Настройки JSON \r\n          <my-input type=\"text\" class=\"input\" v-model=\"channel.json\"/>\r\n      </div>\r\n      <div class=\"active\">\r\n          Канал активен?\r\n          <select class=\"input\" v-model=\"channel.status\">\r\n              <option :value=\"true\">Да</option>\r\n              <option :value=\"false\">Нет</option>\r\n          </select>\r\n      </div>\r\n      <button class=\"save__btn\">Сохранить</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n      channels: {\r\n          type: Array,\r\n          required: true\r\n      }\r\n  },\r\n  data() {\r\n      return {\r\n          channel: {\r\n              title: '',\r\n              code: '',\r\n              mailing: 'Telegram Bot',\r\n              disc: '',\r\n              json: '{ \"telegram_token\":\"\"}',\r\n              status: true\r\n          },\r\n          errors: {\r\n              title: '',\r\n              code: ''\r\n          }\r\n      }\r\n  },\r\n  methods: {\r\n      getNextId() {\r\n          if (this.channels.length === 0) {\r\n              return 1;\r\n          }\r\n          const maxId = Math.max(...this.channels.map(channel => channel.id));\r\n          return maxId + 1;\r\n      },\r\n      createChannel() {\r\n          this.clearErrors();\r\n\r\n          if (!this.channel.title) {\r\n              this.errors.title = 'Название обязательно для заполнения';\r\n          }\r\n\r\n          if (!this.channel.code) {\r\n              this.errors.code = 'Уникальный код обязательно для заполнения';\r\n          }\r\n\r\n          if (this.errors.title || this.errors.code) {\r\n              return;\r\n          }\r\n\r\n          const newChannelId = this.getNextId();\r\n          const newChannel = { ...this.channel, id: newChannelId };\r\n          this.$emit('create', newChannel);\r\n          this.resetForm();\r\n      },\r\n      clearErrors() {\r\n          this.errors = {\r\n              title: '',\r\n              code: ''\r\n          };\r\n      },\r\n      resetForm() {\r\n          this.channel = {\r\n              title: '',\r\n              code: '',\r\n              mailing: 'Telegram Bot',\r\n              disc: '',\r\n              json: '{ \"telegram_token\":\"\"}',\r\n              status: true\r\n          };\r\n      }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.save__btn {\r\n  display: block;\r\n  width: 100%;\r\n  background-color: #3386f3;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.input {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":"AA2CA,eAAe;EACbA,KAAK,EAAE;IACHC,QAAQ,EAAE;MACNC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACd;EACJ,CAAC;EACDC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,OAAO,EAAE;QACLC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,wBAAwB;QAC9BC,MAAM,EAAE;MACZ,CAAC;MACDC,MAAM,EAAE;QACJN,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACV;IACJ;EACJ,CAAC;EACDM,OAAO,EAAE;IACLC,SAASA,CAAA,EAAG;MACR,IAAI,IAAI,CAACd,QAAQ,CAACe,MAAK,KAAM,CAAC,EAAE;QAC5B,OAAO,CAAC;MACZ;MACA,MAAMC,KAAI,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACmB,GAAG,CAACd,OAAM,IAAKA,OAAO,CAACe,EAAE,CAAC,CAAC;MACnE,OAAOJ,KAAI,GAAI,CAAC;IACpB,CAAC;IACDK,aAAaA,CAAA,EAAG;MACZ,IAAI,CAACC,WAAW,CAAC,CAAC;MAElB,IAAI,CAAC,IAAI,CAACjB,OAAO,CAACC,KAAK,EAAE;QACrB,IAAI,CAACM,MAAM,CAACN,KAAI,GAAI,qCAAqC;MAC7D;MAEA,IAAI,CAAC,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;QACpB,IAAI,CAACK,MAAM,CAACL,IAAG,GAAI,2CAA2C;MAClE;MAEA,IAAI,IAAI,CAACK,MAAM,CAACN,KAAI,IAAK,IAAI,CAACM,MAAM,CAACL,IAAI,EAAE;QACvC;MACJ;MAEA,MAAMgB,YAAW,GAAI,IAAI,CAACT,SAAS,CAAC,CAAC;MACrC,MAAMU,UAAS,GAAI;QAAE,GAAG,IAAI,CAACnB,OAAO;QAAEe,EAAE,EAAEG;MAAa,CAAC;MACxD,IAAI,CAACE,KAAK,CAAC,QAAQ,EAAED,UAAU,CAAC;MAChC,IAAI,CAACE,SAAS,CAAC,CAAC;IACpB,CAAC;IACDJ,WAAWA,CAAA,EAAG;MACV,IAAI,CAACV,MAAK,GAAI;QACVN,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACV,CAAC;IACL,CAAC;IACDmB,SAASA,CAAA,EAAG;MACR,IAAI,CAACrB,OAAM,GAAI;QACXC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,wBAAwB;QAC9BC,MAAM,EAAE;MACZ,CAAC;IACL;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}