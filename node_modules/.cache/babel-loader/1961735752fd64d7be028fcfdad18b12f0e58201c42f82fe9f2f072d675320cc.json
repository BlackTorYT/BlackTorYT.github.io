{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    pattern: {\n      type: Object,\n      default: () => ({\n        name: '',\n        phone: '',\n        username: '',\n        tg: '',\n        note: '',\n        phoneConfirmed: 'Да',\n        status: true\n      })\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    },\n    patterns: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      localPattern: {\n        ...this.pattern\n      },\n      errors: {\n        name: '',\n        phone: ''\n      }\n    };\n  },\n  methods: {\n    handleSubmitPattern() {\n      this.clearErrors();\n      if (!this.localPattern.name) {\n        this.errors.name = 'Имя обязательно для заполнения';\n      }\n      if (!this.localPattern.phone) {\n        this.errors.phone = 'Телефон обязателен для заполнения';\n      }\n      if (this.errors.name || this.errors.phone) {\n        return;\n      }\n      if (this.isEdit) {\n        this.$emit('update', this.localPattern);\n      } else {\n        this.$emit('create', {\n          ...this.localPattern,\n          id: this.getNextId()\n        });\n      }\n      this.$router.push('/patterns');\n    },\n    clearErrors() {\n      this.errors = {\n        name: '',\n        phone: ''\n      };\n    },\n    getNextId() {\n      if (this.patterns.length === 0) {\n        return 1;\n      }\n      const maxId = Math.max(...this.patterns.map(pattern => pattern.id));\n      return maxId + 1;\n    }\n  }\n};","map":{"version":3,"names":["props","pattern","type","Object","default","name","phone","username","tg","note","phoneConfirmed","status","isEdit","Boolean","patterns","Array","required","data","localPattern","errors","methods","handleSubmitPattern","clearErrors","$emit","id","getNextId","$router","push","length","maxId","Math","max","map"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\PatternForm.vue"],"sourcesContent":["<template>\r\n  <form class=\"wrapper\" @submit.prevent=\"handleSubmitSubcsriber\" style=\"background-color: white;\">\r\n    <div class=\"wrapper__head\">\r\n      <h1>{{ isEdit ? 'Редактирование' : 'Создание' }} канала отправки</h1>\r\n      <span>Панель управления / Каналы отправки / {{ isEdit ? 'Редактирование' : 'Создание' }} канала отправки </span>\r\n    </div>\r\n    <div class=\"name\">\r\n      Имя пользователя\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.name\" />\r\n      <span v-if=\"errors.name\" class=\"error\">{{ errors.name }}</span>\r\n    </div>\r\n    <div class=\"phone\">\r\n      Телефон\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.phone\" />\r\n      <span v-if=\"errors.phone\" class=\"error\">{{ errors.phone }}</span>\r\n    </div>\r\n    <div class=\"username\">\r\n      Никнейм(username)\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.username\" />\r\n      <!-- <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span> -->\r\n    </div>\r\n    <div class=\"tg\">\r\n      Telegram Chatid\r\n      <my-input type=\"text\" class=\"input\" v-model=\"localPattern.tg\" />\r\n      <!-- <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span> -->\r\n    </div>\r\n    <div class=\"note\">\r\n      Примечание администратора\r\n      <my-input type=\"text\" class=\"input\" placeholder=\"Произвольное примечение для администратора\" \r\n      v-model=\"localPattern.note\" />\r\n      <!-- <span v-if=\"errors.code\" class=\"error\">{{ errors.code }}</span> -->\r\n    </div>\r\n    <div class=\"phoneConfirmed\">\r\n      Телефон подтвержден?\r\n      <select class=\"input\" v-model=\"localPattern.phoneConfirmed\">\r\n        <option :value=\"true\">Да</option>\r\n        <option :value=\"false\">Нет</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"active\">\r\n      Статус подписчика\r\n      <select class=\"input\" v-model=\"localPattern.status\">\r\n        <option :value=\"true\">Включен</option>\r\n        <option :value=\"false\">Отключен</option>\r\n      </select>\r\n    </div>\r\n    <button class=\"save__btn\">{{ isEdit ? 'Сохранить изменения' : 'Создать' }}</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    pattern: {\r\n      type: Object,\r\n      default: () => ({\r\n        name: '',\r\n        phone: '',\r\n        username: '',\r\n        tg: '',\r\n        note: '',\r\n        phoneConfirmed: 'Да',\r\n        status: true\r\n      })\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    patterns: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      localPattern: { ...this.pattern },\r\n      errors: {\r\n        name: '',\r\n        phone: ''\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    handleSubmitPattern() {\r\n      this.clearErrors();\r\n\r\n      if (!this.localPattern.name) {\r\n        this.errors.name = 'Имя обязательно для заполнения';\r\n      }\r\n\r\n      if (!this.localPattern.phone) {\r\n        this.errors.phone = 'Телефон обязателен для заполнения';\r\n      }\r\n\r\n      if (this.errors.name || this.errors.phone) {\r\n        return;\r\n      }\r\n\r\n      if (this.isEdit) {\r\n        this.$emit('update', this.localPattern);\r\n      } else {\r\n        this.$emit('create', { ...this.localPattern, id: this.getNextId() });\r\n      }\r\n      this.$router.push('/patterns');\r\n    },\r\n    clearErrors() {\r\n      this.errors = {\r\n        name: '',\r\n        phone: ''\r\n      };\r\n    },\r\n    getNextId() {\r\n      if (this.patterns.length === 0) {\r\n        return 1;\r\n      }\r\n      const maxId = Math.max(...this.patterns.map(pattern => pattern.id));\r\n      return maxId + 1;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.save__btn {\r\n  display: block;\r\n  width: 100%;\r\n  background-color: #3386f3;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.input {\r\n  margin-bottom: 10px;\r\n  padding: 8px;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":";AAmDA,eAAe;EACbA,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAEA,CAAA,MAAO;QACdC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,EAAE,EAAE,EAAE;QACNC,IAAI,EAAE,EAAE;QACRC,cAAc,EAAE,IAAI;QACpBC,MAAM,EAAE;MACV,CAAC;IACH,CAAC;IACDC,MAAM,EAAE;MACNV,IAAI,EAAEW,OAAO;MACbT,OAAO,EAAE;IACX,CAAC;IACDU,QAAQ,EAAE;MACRZ,IAAI,EAAEa,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE;QAAE,GAAG,IAAI,CAACjB;MAAQ,CAAC;MACjCkB,MAAM,EAAE;QACNd,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE;MACT;IACF,CAAC;EACH,CAAC;EACDc,OAAO,EAAE;IACPC,mBAAmBA,CAAA,EAAG;MACpB,IAAI,CAACC,WAAW,CAAC,CAAC;MAElB,IAAI,CAAC,IAAI,CAACJ,YAAY,CAACb,IAAI,EAAE;QAC3B,IAAI,CAACc,MAAM,CAACd,IAAG,GAAI,gCAAgC;MACrD;MAEA,IAAI,CAAC,IAAI,CAACa,YAAY,CAACZ,KAAK,EAAE;QAC5B,IAAI,CAACa,MAAM,CAACb,KAAI,GAAI,mCAAmC;MACzD;MAEA,IAAI,IAAI,CAACa,MAAM,CAACd,IAAG,IAAK,IAAI,CAACc,MAAM,CAACb,KAAK,EAAE;QACzC;MACF;MAEA,IAAI,IAAI,CAACM,MAAM,EAAE;QACf,IAAI,CAACW,KAAK,CAAC,QAAQ,EAAE,IAAI,CAACL,YAAY,CAAC;MACzC,OAAO;QACL,IAAI,CAACK,KAAK,CAAC,QAAQ,EAAE;UAAE,GAAG,IAAI,CAACL,YAAY;UAAEM,EAAE,EAAE,IAAI,CAACC,SAAS,CAAC;QAAE,CAAC,CAAC;MACtE;MACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;IAChC,CAAC;IACDL,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACH,MAAK,GAAI;QACZd,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE;MACT,CAAC;IACH,CAAC;IACDmB,SAASA,CAAA,EAAG;MACV,IAAI,IAAI,CAACX,QAAQ,CAACc,MAAK,KAAM,CAAC,EAAE;QAC9B,OAAO,CAAC;MACV;MACA,MAAMC,KAAI,GAAIC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI,CAACjB,QAAQ,CAACkB,GAAG,CAAC/B,OAAM,IAAKA,OAAO,CAACuB,EAAE,CAAC,CAAC;MACnE,OAAOK,KAAI,GAAI,CAAC;IAClB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}