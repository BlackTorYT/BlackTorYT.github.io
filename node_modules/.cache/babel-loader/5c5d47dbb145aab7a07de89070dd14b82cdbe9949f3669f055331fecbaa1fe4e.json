{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_channel_form = _resolveComponent(\"channel-form\");\n  const _component_channel_list = _resolveComponent(\"channel-list\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_channel_form, {\n    onCreate: $options.createChannel\n  }, null, 8 /* PROPS */, [\"onCreate\"]), _createVNode(_component_channel_list, {\n    channels: $data.channels,\n    onRemove: $options.removeChannel,\n    onRemoveSelected: $options.removeSelectedChannel\n  }, null, 8 /* PROPS */, [\"channels\", \"onRemove\", \"onRemoveSelected\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_channel_form","onCreate","$options","createChannel","_component_channel_list","channels","$data","onRemove","removeChannel","onRemoveSelected","removeSelectedChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\ChannelPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n    <channel-form @create=\"createChannel\"/>\r\n    <channel-list v-bind:channels=\"channels\" @remove=\"removeChannel\" @removeSelected=\"removeSelectedChannel\"/>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChannelList from \"@/components/ChannelList.vue\";\r\nimport ChannelForm from \"@/components/ChannelForm.vue\";\r\nexport default {\r\n  components: {\r\n    ChannelList, ChannelForm\r\n  },\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      channels: [\r\n        {id: 1, title: \"Telegram Bot\", code: \"TELEGRAM_BOT\", mailing: \"TELEGRAM_BOT\", disc: \"Тг бот\", status: true},\r\n        {id: 2, title: \"MTS\", code: \"MTS_GW\", mailing: \"SMS\", disc: \"\", status: true}\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    createChannel(channel) {\r\n      this.channels.push(channel);\r\n    },\r\n    removeChannel(channel) {\r\n      this.channels = this.channels.filter(c => c.id !== channel.id) //в результат. массив попадают посты, все проме того, который мы пытаемся удалить\r\n    },\r\n    removeSelectedChannel(selectedChannelIds) {\r\n    this.channels = this.channels.filter(channel => !selectedChannelIds.includes(channel.id));\r\n  }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n\r\n.header {\r\n  height: 56px;\r\n  padding: 16px;\r\n  background-color: white;\r\n}\r\n\r\n.nav__list {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.nav__item__notification {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 230px;\r\n}\r\n\r\n#nav__item_left {\r\n  width: 200px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.exit__img {\r\n  margin-right: 10px;\r\n}\r\n\r\n.nav__item__exit {\r\n  width: 200px;\r\n}\r\n\r\n\r\n\r\n\r\n</style>\r\n"],"mappings":";;;;uBACEA,mBAAA,CAMM,cAJJC,YAAA,CAAuCC,uBAAA;IAAxBC,QAAM,EAAEC,QAAA,CAAAC;EAAa,uCACpCJ,YAAA,CAA0GK,uBAAA;IAArFC,QAAQ,EAAEC,KAAA,CAAAD,QAAQ;IAAGE,QAAM,EAAEL,QAAA,CAAAM,aAAa;IAAGC,gBAAc,EAAEP,QAAA,CAAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}