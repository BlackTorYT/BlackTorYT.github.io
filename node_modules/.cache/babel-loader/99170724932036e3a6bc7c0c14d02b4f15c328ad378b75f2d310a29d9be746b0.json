{"ast":null,"code":"import MyButton from \"@/components/UI/MyButton.vue\";\nexport default {\n  components: {\n    MyButton\n  },\n  props: {\n    pattern: {\n      type: Object,\n      required: true\n    },\n    selected: {\n      type: Boolean,\n      required: true\n    }\n  },\n  computed: {\n    statusText() {\n      return this.pattern.status ? 'Включен' : 'Отключен';\n    }\n  },\n  methods: {\n    toggle() {\n      this.$emit('toggle', this.pattern.id);\n    },\n    testPattern() {\n      const testLog = {\n        id: Date.now(),\n        // Используем текущее время в качестве уникального ID\n        info: `Test log for pattern ${this.pattern.title}`,\n        message: this.pattern.code,\n        status: 'test',\n        time: new Date().toLocaleString(),\n        config: '',\n        subscriptionId: 1 // Используем первый ID подписки\n      };\n      this.$emit('testPattern', testLog);\n    }\n  }\n};","map":{"version":3,"names":["MyButton","components","props","pattern","type","Object","required","selected","Boolean","computed","statusText","status","methods","toggle","$emit","id","testPattern","testLog","Date","now","info","title","message","code","time","toLocaleString","config","subscriptionId"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\components\\PatternItem.vue"],"sourcesContent":["<template>\r\n  <tbody>\r\n    <tr class=\"pattern\">\r\n      <td><input type=\"checkbox\" :checked=\"selected\" @change=\"toggle\"></td>\r\n      <td>{{ pattern.id }}</td>\r\n      <td>{{ pattern.title }}</td>\r\n      <td>{{ pattern.code }}</td>\r\n      <td>{{ pattern.pattern }}</td>\r\n      <td>{{ pattern.type }}</td>\r\n      <td>\r\n        <router-link :to=\"'/patterns/edit/' + pattern.id\">\r\n          <button>Изменить</button>\r\n        </router-link>\r\n        <div class=\"pattern__delete\" @click=\"$emit('remove', pattern)\"><my-button><img src=\"../assets/trash.png\" alt=\"\">Удалить</my-button></div>\r\n        <div class=\"pattern__test\" @click=\"testPattern\"><my-button><img src=\"../assets/test.png\" alt=\"\">Тестировать</my-button></div>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</template>\r\n\r\n<script>\r\nimport MyButton from \"@/components/UI/MyButton.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    MyButton\r\n  },\r\n  props: {\r\n    pattern: {\r\n      type: Object,\r\n      required: true\r\n     },\r\n    selected: {\r\n      type: Boolean,\r\n      required: true\r\n    } \r\n  },\r\n  computed: {\r\n    statusText() {\r\n      return this.pattern.status ? 'Включен' : 'Отключен';\r\n    }\r\n  },\r\n  methods: {\r\n    toggle() {\r\n      this.$emit('toggle', this.pattern.id);\r\n    },\r\n    testPattern() {\r\n      const testLog = {\r\n        id: Date.now(), // Используем текущее время в качестве уникального ID\r\n        info: `Test log for pattern ${this.pattern.title}`,\r\n        message: this.pattern.code,\r\n        status: 'test',\r\n        time: new Date().toLocaleString(),\r\n        config: '',\r\n        subscriptionId: 1 // Используем первый ID подписки\r\n      };\r\n      this.$emit('testPattern', testLog);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"AAqBA,OAAOA,QAAO,MAAO,8BAA8B;AAEnD,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACX,CAAC;IACFC,QAAQ,EAAE;MACRH,IAAI,EAAEI,OAAO;MACbF,QAAQ,EAAE;IACZ;EACF,CAAC;EACDG,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACP,OAAO,CAACQ,MAAK,GAAI,SAAQ,GAAI,UAAU;IACrD;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,MAAMA,CAAA,EAAG;MACP,IAAI,CAACC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAACX,OAAO,CAACY,EAAE,CAAC;IACvC,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,MAAMC,OAAM,GAAI;QACdF,EAAE,EAAEG,IAAI,CAACC,GAAG,CAAC,CAAC;QAAE;QAChBC,IAAI,EAAE,wBAAwB,IAAI,CAACjB,OAAO,CAACkB,KAAK,EAAE;QAClDC,OAAO,EAAE,IAAI,CAACnB,OAAO,CAACoB,IAAI;QAC1BZ,MAAM,EAAE,MAAM;QACda,IAAI,EAAE,IAAIN,IAAI,CAAC,CAAC,CAACO,cAAc,CAAC,CAAC;QACjCC,MAAM,EAAE,EAAE;QACVC,cAAc,EAAE,EAAE;MACpB,CAAC;MACD,IAAI,CAACb,KAAK,CAAC,aAAa,EAAEG,OAAO,CAAC;IACpC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}