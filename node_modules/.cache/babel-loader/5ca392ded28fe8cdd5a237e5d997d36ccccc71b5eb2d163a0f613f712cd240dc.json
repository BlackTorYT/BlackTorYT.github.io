{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_channel_form = _resolveComponent(\"channel-form\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_channel_form, {\n    channel: $options.channel,\n    onUpdate: $options.handleUpdateChannel\n  }, null, 8 /* PROPS */, [\"channel\", \"onUpdate\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_channel_form","channel","$options","onUpdate","handleUpdateChannel"],"sources":["F:\\Vue Notifications\\notifications_practice\\src\\pages\\EditChannelPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <channel-form :channel=\"channel\" @update=\"handleUpdateChannel\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ChannelForm from \"@/components/ChannelForm.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    ChannelForm\r\n  },\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    channels: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    channel() {\r\n      return this.channels.find(channel => channel.id === this.id);\r\n    }\r\n  },\r\n  methods: {\r\n    handleUpdateChannel(updatedChannel) {\r\n      this.$emit('updateChannel', updatedChannel);\r\n      this.$router.push('/channels');\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* добавьте стили, если нужно */\r\n</style>\r\n"],"mappings":";;;uBACEA,mBAAA,CAEM,cADJC,YAAA,CAAiEC,uBAAA;IAAlDC,OAAO,EAAEC,QAAA,CAAAD,OAAO;IAAGE,QAAM,EAAED,QAAA,CAAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}